generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  password          String
  wallet            Float              @default(0)
  investments       Investment[]
  investmentHistory InvestmentHistory[] // Relación añadida
  roleId            String
  role              Role               @relation(fields: [roleId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  isActive          Boolean            @default(true)
  deletedAt         DateTime?
}

model Role {
  id      String @id @default(uuid())
  name    String @unique
  users   User[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  projects    Project[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id           String       @id @default(uuid())
  title        String       @unique
  description  String
  capacity     Float        // Monto total que puede recaudar el proyecto
  minInvestment Float       // Monto mínimo que cada usuario puede invertir
  raisedAmount Float        @default(0) // Monto recaudado hasta ahora
  duration     Int          // Duración en días o meses
  returnType   String       // 'fixed' o 'variable'
  fixedReturn  Float?       // Porcentaje de ganancia (si es 'fixed')
  categoryId   String
  category     Category     @relation(fields: [categoryId], references: [id])
  investments  Investment[]
  histories    InvestmentHistory[] // Relación inversa con InvestmentHistory
  status       String        @default("open") // 'open', 'closed', 'completed'
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  deletedAt    DateTime?
}


model Investment {
  id          String   @id @default(uuid())
  amount      Float    // Monto invertido
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  projectId   String
  project     Project  @relation(fields: [projectId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model InvestmentHistory {
  id              String   @id @default(uuid())
  userId          String
  user            User     @relation(fields: [userId], references: [id])
  projectId       String?
  project         Project? @relation(fields: [projectId], references: [id])
  action          String
  amount          Float
  profitLoss      Float
  returnType      String?
  walletBalance   Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
